// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SPD.Api.Authentication.Business.DataBase;

namespace SPD.Api.Authentication.Migrations
{
    [DbContext(typeof(AuthorizationDbContext))]
    partial class AuthorizationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.RoleClaimEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesClaim");
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af1fc231-ac96-432f-bf08-1f0d267d067e"),
                            ConcurrencyStamp = "3b836cff-28b2-4c06-99b9-b1a08a4d4879",
                            Name = "Owner",
                            NormalizedName = "Owner"
                        },
                        new
                        {
                            Id = new Guid("500d9387-7e1c-4652-9317-381fc350afb9"),
                            ConcurrencyStamp = "e16e8bb2-ebeb-409d-8be9-9e544334dcd0",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("a9f0bccc-bb0b-49cc-8d48-3ae5fa775113"),
                            ConcurrencyStamp = "137a7edf-529a-4226-8d27-33974fd485ef",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = new Guid("c733461c-736c-4df6-8d8c-a5ce67978414"),
                            ConcurrencyStamp = "5c340b38-9c55-42d2-a902-cb18c0d228b8",
                            Name = "Editor",
                            NormalizedName = "Editor"
                        },
                        new
                        {
                            Id = new Guid("06333882-6970-4f7b-bfcd-8b3858588b17"),
                            ConcurrencyStamp = "3b447ed0-47aa-4fcc-9b01-182a26e025e2",
                            Name = "Buyer",
                            NormalizedName = "Buyer"
                        },
                        new
                        {
                            Id = new Guid("86298c9d-11f1-4c7d-b7a7-5adbf3a904cc"),
                            ConcurrencyStamp = "cdc716ff-b1b7-4291-817d-bf626829a1c5",
                            Name = "Business",
                            NormalizedName = "Business"
                        },
                        new
                        {
                            Id = new Guid("0f7af0a8-0ffa-4138-8089-535ec9f252f3"),
                            ConcurrencyStamp = "096795f4-1d8d-4c7c-8b3a-f7c1d8357bd3",
                            Name = "Seller",
                            NormalizedName = "Seller"
                        },
                        new
                        {
                            Id = new Guid("621259df-1421-4948-a367-9abafbf0b114"),
                            ConcurrencyStamp = "3552be63-1e06-47d8-9fc1-46f3cde56eef",
                            Name = "Subscriber",
                            NormalizedName = "Subscriber"
                        });
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserClaimEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("FullfilmentComplete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a1e1d77-c92e-4750-aba7-dd4c17851179"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14729aab-5009-4f17-ae5e-ce280b9b6f25",
                            Email = "diego.modesto@company.com",
                            EmailConfirmed = false,
                            FirstName = "Diego",
                            FullfilmentComplete = false,
                            LastName = "Modesto",
                            LockoutEnabled = true,
                            NormalizedEmail = "DIEGO.MODESTO@COMPANY.COM",
                            NormalizedUserName = "DIEGO.MODESTO",
                            PasswordHash = "AQAAAAEAACcQAAAAEFJYX3v7QDVR3s30dR9szO174kWhYWWiYH6WODdrrr7rOXr4CYSJqLnLke5Vj04hxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53698001-b21d-4442-91bb-0ab846f3cd02",
                            TwoFactorEnabled = false,
                            UserName = "diego.modesto"
                        },
                        new
                        {
                            Id = new Guid("f1d3ec4c-337a-4f74-86a7-28fe0b311a32"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f4ba486-b20f-4c53-899b-761b5dda821d",
                            Email = "samuel.souza@company.com",
                            EmailConfirmed = false,
                            FirstName = "Samuel",
                            FullfilmentComplete = false,
                            LastName = "Souza",
                            LockoutEnabled = true,
                            NormalizedEmail = "SAMUEL.SOUZA@COMPANY.COM",
                            NormalizedUserName = "SAMUEL.SOUZA",
                            PasswordHash = "AQAAAAEAACcQAAAAEHq9oAZn9fLM4ToNr0pElxlEYzca5KWJS5jQFJZAG7vkBbRak4Iy8HJ9Gae6Zx2ZOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2163f504-d5da-446c-a416-4f8060968fc7",
                            TwoFactorEnabled = false,
                            UserName = "samuel.souza"
                        },
                        new
                        {
                            Id = new Guid("4bbd9499-52fd-4781-9082-b4285adfcce7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64c31317-c895-4a74-ae30-ace019d4a428",
                            Email = "user.buyer@company.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            FullfilmentComplete = false,
                            LastName = "Buyer",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER.BUYER@COMPANY.COM",
                            NormalizedUserName = "USER.BUYER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBmCF1onfADv8p+Z3bTNTGT5XOAKyedHCkY5hKccCh6mrNj4W5iHsre8zwNFx+icOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df3f0796-0555-4bfd-bdf2-a8f41b33585b",
                            TwoFactorEnabled = false,
                            UserName = "user.buyer"
                        },
                        new
                        {
                            Id = new Guid("26c1dc42-2936-4fd9-9043-457c4915adc5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f33e624-7c74-4da5-bee9-1b540d392b33",
                            Email = "user.Seller@company.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            FullfilmentComplete = false,
                            LastName = "Seller",
                            LockoutEnabled = true,
                            NormalizedEmail = "USER.SELLER@COMPANY.COM",
                            NormalizedUserName = "USER.SELLER",
                            PasswordHash = "AQAAAAEAACcQAAAAEFLaqpxypJz5hKZGImXeJRfx8ZUSjSC3b4ph6HShK+hpCeBtx9re75WH1NAGv1h/6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6cd8d627-829c-4aad-8e34-f086e02a0c5f",
                            TwoFactorEnabled = false,
                            UserName = "user.seller"
                        });
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserLoginEntity", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UsersLogin");
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8a1e1d77-c92e-4750-aba7-dd4c17851179"),
                            RoleId = new Guid("af1fc231-ac96-432f-bf08-1f0d267d067e")
                        },
                        new
                        {
                            UserId = new Guid("f1d3ec4c-337a-4f74-86a7-28fe0b311a32"),
                            RoleId = new Guid("500d9387-7e1c-4652-9317-381fc350afb9")
                        },
                        new
                        {
                            UserId = new Guid("4bbd9499-52fd-4781-9082-b4285adfcce7"),
                            RoleId = new Guid("06333882-6970-4f7b-bfcd-8b3858588b17")
                        },
                        new
                        {
                            UserId = new Guid("26c1dc42-2936-4fd9-9043-457c4915adc5"),
                            RoleId = new Guid("0f7af0a8-0ffa-4138-8089-535ec9f252f3")
                        });
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserTokenEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UsersToken");
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.RoleClaimEntity", b =>
                {
                    b.HasOne("SPD.Api.Authentication.Business.Model.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserClaimEntity", b =>
                {
                    b.HasOne("SPD.Api.Authentication.Business.Model.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserLoginEntity", b =>
                {
                    b.HasOne("SPD.Api.Authentication.Business.Model.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserRoleEntity", b =>
                {
                    b.HasOne("SPD.Api.Authentication.Business.Model.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPD.Api.Authentication.Business.Model.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserTokenEntity", b =>
                {
                    b.HasOne("SPD.Api.Authentication.Business.Model.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
