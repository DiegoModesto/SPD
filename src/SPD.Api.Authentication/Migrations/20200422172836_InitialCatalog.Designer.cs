// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SPD.Api.Authentication.Business.DataBase;

namespace SPD.Api.Authentication.Migrations
{
    [DbContext(typeof(AuthorizationDbContext))]
    [Migration("20200422172836_InitialCatalog")]
    partial class InitialCatalog
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.RoleClaimEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolesClaim");
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94ebd846-586a-4d4a-877c-7b7439032d59"),
                            ConcurrencyStamp = "1ddaed2a-69fc-4cde-95b6-4a0a57c00eaf",
                            Name = "Owner",
                            NormalizedName = "Owner"
                        },
                        new
                        {
                            Id = new Guid("94ce009f-8e1b-4ac2-8a68-a3c358617529"),
                            ConcurrencyStamp = "a2173766-3f8d-48fd-b24d-5371c79ba70a",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("99cc1d0e-ffa3-47c4-be06-5cd6e8a3ba9b"),
                            ConcurrencyStamp = "2b5d93c9-229e-4bea-adbb-f558270f6f28",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = new Guid("ba23acff-786a-4fb1-bd86-a78220d30b10"),
                            ConcurrencyStamp = "831131ca-1ccc-476b-87e2-cf478d167e0c",
                            Name = "Editor",
                            NormalizedName = "Editor"
                        },
                        new
                        {
                            Id = new Guid("8693637e-16ab-4f8d-9cbf-2e53981b35ab"),
                            ConcurrencyStamp = "934cdbb6-cd4b-4089-9c47-80274e072d21",
                            Name = "Buyer",
                            NormalizedName = "Buyer"
                        },
                        new
                        {
                            Id = new Guid("74b4c15c-8f37-4499-bdf1-b06dede91508"),
                            ConcurrencyStamp = "fccf3f4e-367a-4fd0-accb-117ab827e576",
                            Name = "Business",
                            NormalizedName = "Business"
                        },
                        new
                        {
                            Id = new Guid("1710308e-509d-40ae-a0d6-3f4feccba1b0"),
                            ConcurrencyStamp = "5b76f3e0-0618-4748-866f-b5f468431cc2",
                            Name = "Seller",
                            NormalizedName = "Seller"
                        },
                        new
                        {
                            Id = new Guid("b69a3a7c-0e3d-46b6-90c2-d33f0132b684"),
                            ConcurrencyStamp = "f49bb0ec-ed89-461f-80da-5a89a2a31762",
                            Name = "Subscriber",
                            NormalizedName = "Subscriber"
                        });
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserClaimEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("FullfilmentComplete")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("330180fa-48d7-4a63-a6f2-d94a68d003f4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5404e1e8-5622-4e6c-9c44-607d064b12d8",
                            Email = "diego.modesto@company.com",
                            EmailConfirmed = false,
                            FirstName = "Diego",
                            FullfilmentComplete = false,
                            LastName = "Modesto",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBpaNBWctUDCszBxTLIr35uZ3rziQ1iqdwHr9EvKw3t5sjUwyshFo0pg3fanhfWujQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "diego.modesto"
                        },
                        new
                        {
                            Id = new Guid("3dcc7d9a-2982-4be5-9d31-fc2c54fa512b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6198f0cd-9f02-4d81-85b9-4453e1f7123b",
                            Email = "samuel.souza@company.com",
                            EmailConfirmed = false,
                            FirstName = "Samuel",
                            FullfilmentComplete = false,
                            LastName = "Souza",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELL6J7F17EXVxH6Dlf5VHfvPU3t8Aaw7IXci99QgYnBFFjpLB2BAhUeCPspgm4Px1g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "samuel.souza"
                        },
                        new
                        {
                            Id = new Guid("95ae70c7-43b9-4880-8c16-e555d5f04577"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01949a8a-0149-478a-b15a-4e7b7a2b754b",
                            Email = "user.buyer@company.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            FullfilmentComplete = false,
                            LastName = "Buyer",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDRA6FKS7OVVEzLZuo9sVG40JprHS3uK84cMAd6yZb5+7uvzcH4ixYORkBmSYjWpPg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user.buyer"
                        },
                        new
                        {
                            Id = new Guid("444d83ca-4f89-4263-9e29-175df2d3dfe6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b0530fd-12d9-4a78-8888-a3796f9eadfb",
                            Email = "user.Seller@company.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            FullfilmentComplete = false,
                            LastName = "Seller",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDv2g/XfOGQPk9SRP/kVYf7M4prTUSe9ibi2LCMOzsZt7RCIteGNAS08nmgzvWJUiw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user.seller"
                        });
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserLoginEntity", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UsersLogin");
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("330180fa-48d7-4a63-a6f2-d94a68d003f4"),
                            RoleId = new Guid("94ebd846-586a-4d4a-877c-7b7439032d59")
                        },
                        new
                        {
                            UserId = new Guid("3dcc7d9a-2982-4be5-9d31-fc2c54fa512b"),
                            RoleId = new Guid("94ce009f-8e1b-4ac2-8a68-a3c358617529")
                        },
                        new
                        {
                            UserId = new Guid("95ae70c7-43b9-4880-8c16-e555d5f04577"),
                            RoleId = new Guid("8693637e-16ab-4f8d-9cbf-2e53981b35ab")
                        },
                        new
                        {
                            UserId = new Guid("444d83ca-4f89-4263-9e29-175df2d3dfe6"),
                            RoleId = new Guid("1710308e-509d-40ae-a0d6-3f4feccba1b0")
                        });
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserTokenEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UsersToken");
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.RoleClaimEntity", b =>
                {
                    b.HasOne("SPD.Api.Authentication.Business.Model.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserClaimEntity", b =>
                {
                    b.HasOne("SPD.Api.Authentication.Business.Model.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserLoginEntity", b =>
                {
                    b.HasOne("SPD.Api.Authentication.Business.Model.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserRoleEntity", b =>
                {
                    b.HasOne("SPD.Api.Authentication.Business.Model.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SPD.Api.Authentication.Business.Model.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SPD.Api.Authentication.Business.Model.UserTokenEntity", b =>
                {
                    b.HasOne("SPD.Api.Authentication.Business.Model.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
